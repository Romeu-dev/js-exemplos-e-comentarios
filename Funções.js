// üîπ O que √© uma fun√ß√£o?
// Uma fun√ß√£o √© um bloco de c√≥digo reutiliz√°vel que executa uma tarefa espec√≠fica.
// Em JavaScript, fun√ß√µes s√£o cidad√£s de primeira classe, ou seja, podem ser atribu√≠das a vari√°veis,
// passadas como argumentos ou retornadas por outras fun√ß√µes.
function saudacao() {
  console.log("Ol√°!");
}
saudacao(); // Executa a fun√ß√£o

// üîπ Par√¢metros e retorno
// Fun√ß√µes podem receber par√¢metros (valores de entrada) e retornar valores:

function soma(a, b) {
  return a + b;
}
console.log(soma(2, 3)); // 5

//üîπ Fun√ß√µes an√¥nimas e arrow functions
// Fun√ß√µes an√¥nimas s√£o fun√ß√µes sem nome, normalmente atribu√≠das a vari√°veis:

const dobroDoNumero = function (n) {
  return n * 2;
};

//Arrow functions s√£o uma forma mais curta de escrever fun√ß√µes:
const triploDoNumero = (n) => n * 3;

// üîπ Escopo de fun√ß√£o
// Vari√°veis declaradas dentro de uma fun√ß√£o s√≥ existem naquele escopo:

function exemplo() {
  let interna = "vis√≠vel s√≥ aqui";
  console.log(interna);
}
// console.log(interna); // Erro: n√£o existe fora da fun√ß√£o

//üîπ Fun√ß√£o como par√¢metro (callback)
// Voc√™ pode passar uma fun√ß√£o como argumento para outra:

function executar(fn) {
  fn();
}

executar(() => console.log("Fun√ß√£o passada como par√¢metro"));

// üîπ Fun√ß√µes que retornam fun√ß√µes (closure)
// Uma closure √© quando uma fun√ß√£o "lembra" do escopo em que foi criada:

function saudador(nome) {
  return function () {
    console.log(`Ol√°, ${nome}`);
  };
}

const saudarMaria = saudador("Maria");
saudarMaria(); // Ol√°, Maria

//  üîπ call, apply e bind

// üî∏ call()
// Permite invocar uma fun√ß√£o com um contexto (this) espec√≠fico:

function apresentar() {
  console.log(`Meu nome √© ${this.nome}`);
}

const pessoa = { nome: "Jo√£o" };
apresentar.call(pessoa); // Meu nome √© Jo√£o

// üî∏ apply()
// √â quase igual ao call, mas recebe os argumentos em um array:

function somar(a, b) {
  return a + b;
}

console.log(somar.apply(null, [2, 3])); // 5

// üî∏ bind()
// Cria uma nova fun√ß√£o com this fixo:

const obj = {
  nome: "Ana",
};

function falar() {
  console.log(this.nome);
}

const falarComAna = falar.bind(obj);
falarComAna(); // Ana

//  üîπ Recurs√£o
// √â quando uma fun√ß√£o chama a si mesma:

function contagem(n) {
  if (n === 0) return;
  console.log(n);
  contagem(n - 1);
}
contagem(3); // 3 2 1

//   üîπ Par√¢metros padr√£o
//   Voc√™ pode definir valores padr√£o para par√¢metros:

function saudacao(nome = "visitante") {
  console.log(`Ol√°, ${nome}`);
}
saudacao(); // Ol√°, visitante

// ‚úÖ Declara√ß√£o de fun√ß√£o
function saudacao(nome) {
  return `Ol√°, ${nome}!`;
}

console.log(saudacao("Lucas")); // Ol√°, Lucas!

// ---------------------------------
// ‚úÖ Express√£o de fun√ß√£o
const dobro = function (numero) {
  return numero * 2;
};

console.log(dobro(5)); // 10

// ---------------------------------
// ‚úÖ Arrow function (fun√ß√£o de seta)
const quadrado = (n) => {
  return n * n;
};

console.log(quadrado(4)); // 16

// Se tiver s√≥ 1 par√¢metro e 1 linha de retorno, pode simplificar:
const triplo = (n) => n * 3;
console.log(triplo(3)); // 9

// ---------------------------------
// ‚úÖ Par√¢metros com valor padr√£o
function boasVindas(nome = "visitante") {
  return `Bem-vindo, ${nome}`;
}

console.log(boasVindas()); // Bem-vindo, visitante

// ---------------------------------
// ‚úÖ Fun√ß√£o dentro de fun√ß√£o (closure)
function saudador(prefixo) {
  return function (nome) {
    return `${prefixo} ${nome}`;
  };
}

const ola = saudador("Ol√°");
console.log(ola("Maria")); // Ol√° Maria

// ---------------------------------
// ‚úÖ Callback (fun√ß√£o passada como par√¢metro)
function processar(valor, funcao) {
  return funcao(valor);
}

function dobrar(n) {
  return n * 2;
}

console.log(processar(10, dobrar)); // 20

// Com arrow:
console.log(processar(7, (n) => n + 1)); // 8

// ---------------------------------
// ‚úÖ Recurs√£o (fun√ß√£o que chama a si mesma)
function fatorial(n) {
  if (n === 0) return 1;
  return n * fatorial(n - 1);
}

console.log(fatorial(5)); // 120

// ---------------------------------
// ‚úÖ Fun√ß√µes como objetos de primeira classe
// (podem ser atribu√≠das, passadas e retornadas)

const operacoes = {
  somar: (a, b) => a + b,
  subtrair: (a, b) => a - b,
};

console.log(operacoes.somar(10, 5)); // 15

// ---------------------------------
// üí™ DESAFIOS PR√ÅTICOS
// ---------------------------------

// 1. Crie uma fun√ß√£o que recebe dois n√∫meros e retorna a m√©dia
function media(a, b) {
  return (a + b) / 2;
}
console.log(media(6, 8)); // 7

// 2. Crie uma arrow function que verifica se um n√∫mero √© par
const ehPar = (n) => n % 2 === 0;
console.log(ehPar(10)); // true

// 3. Crie uma fun√ß√£o que recebe outra fun√ß√£o como par√¢metro e executa
function executar(fn) {
  console.log("Executando a fun√ß√£o:");
  fn();
}

executar(() => console.log("Sou uma fun√ß√£o callback!"));

// 4. Crie uma fun√ß√£o que retorna outra fun√ß√£o para multiplicar por X
function multiplicador(x) {
  return function (y) {
    return x * y;
  };
}

const vezes3 = multiplicador(3);
console.log(vezes3(4)); // 12

// 5. Crie uma fun√ß√£o recursiva para contar de N at√© 1
function contagemRegressiva(n) {
  if (n === 0) return;
  console.log(n);
  contagemRegressiva(n - 1);
}

contagemRegressiva(5); // 5 4 3 2 1

// Fim do m√≥dulo de fun√ß√µes üöÄ
